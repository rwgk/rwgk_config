#!/bin/bash
set -euo pipefail

# Parse args
SKIP_CI=true
PRNAME=""

for arg in "$@"; do
    case "$arg" in
    --no-skip-ci)
        SKIP_CI=false
        ;;
    -*)
        echo "Unknown option: $arg"
        exit 1
        ;;
    *)
        PRNAME="$arg"
        ;;
    esac
done

if [ -z "$PRNAME" ]; then
    echo "Usage: $0 [--no-skip-ci] <prname>"
    exit 1
fi

MANUSCRIPT="${PRNAME}/manuscript"
REVIEW="${PRNAME}/review"
TMP="${PRNAME}/__push4review__"
BASE="master"

# Ensure clean working directory and index
if ! git diff --quiet || ! git diff --cached --quiet; then
    echo "‚ùå Error: Working directory or index is dirty. Please commit or stash your changes first."
    exit 1
fi

echo "üîç Finding merge-base of $MANUSCRIPT and $BASE..."
MERGE_BASE=$(git merge-base "$BASE" "$MANUSCRIPT")

echo "üß™ Creating temporary branch $TMP from $MERGE_BASE..."
git switch -c "$TMP" "$MERGE_BASE" >/dev/null

echo "üì¶ Applying diff from $MANUSCRIPT..."
git diff --binary "$MERGE_BASE" "$MANUSCRIPT" | git apply --index

# Prepare metadata for commit message
MANUSCRIPT_HEAD=$(git rev-parse "$MANUSCRIPT")
MANUSCRIPT_TIME=$(git show -s --format=%ci "$MANUSCRIPT")
REPO_SLUG=$(git config --get remote.origin.url | sed -E 's|.*github.com[:/](.*)\.git|\1|')

# Construct commit message
MSG="Squashed $MANUSCRIPT ‚Äî ${MANUSCRIPT_HEAD} ‚Äî ${MANUSCRIPT_TIME}"
$SKIP_CI && MSG="$MSG [skip ci]"

MSG="$MSG

[Browse $MANUSCRIPT tree](https://github.com/$REPO_SLUG/tree/${MANUSCRIPT_HEAD})

[Browse $MANUSCRIPT commits](https://github.com/$REPO_SLUG/commits/${MANUSCRIPT_HEAD}/)"

# Add co-authors
CO_AUTHORS=$(
    git log --format='%aN <%aE>' "${MERGE_BASE}..${MANUSCRIPT}" |
        sort -u |
        grep -v -F "$(git config user.name) <$(git config user.email)>"
)

if [ -n "$CO_AUTHORS" ]; then
    MSG="$MSG"$'\n' # Add one blank line before the first co-author line
    while IFS= read -r author; do
        MSG="$MSG"$'\n'"Co-authored-by: $author"
    done <<<"$CO_AUTHORS"
fi

# Create squash commit
git commit -m "$MSG" >/dev/null

# Get new tree and check against existing review branch
NEW_TREE=$(git rev-parse "$TMP^{tree}")
REBUILD=false

if git rev-parse --verify -q "$REVIEW" >/dev/null; then
    OLD_TREE=$(git rev-parse "$REVIEW^{tree}")
    OLD_MSG=$(git log -1 --pretty=%B "$REVIEW")

    if [ "$NEW_TREE" != "$OLD_TREE" ]; then
        REBUILD=true
    elif [ "$MSG" != "$OLD_MSG" ]; then
        REBUILD=true
    else
        echo "‚úÖ $REVIEW is already up to date ‚Äî no update needed."
    fi
else
    REBUILD=true
fi

if $REBUILD; then
    echo "üîÅ Updating $REVIEW..."
    git branch -f "$REVIEW" "$TMP"
fi

# Cleanup temp branch and return to previous
git switch - >/dev/null
git branch -D "$TMP"

echo "üöÄ Pushing $MANUSCRIPT to origin (non-force)..."
if git push origin "$MANUSCRIPT"; then
    echo "‚úÖ $MANUSCRIPT pushed."
else
    echo "‚ùå Failed to push $MANUSCRIPT ‚Äî aborting."
    exit 1
fi

echo "üöÄ Pushing $REVIEW to origin (force)..."
git push -f origin "$REVIEW"

echo "‚úÖ Done: $REVIEW and $MANUSCRIPT are now up to date on origin."
