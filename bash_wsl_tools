# WSL Windows Helper Pack generated by ChatGPT

# pwdwin — print current dir as Windows path (for pasting into Windows apps)
pwdwin() {
    wslpath -w "$PWD"
}

# Global cache for Windows home in WSL format
_winhome_wsl=""

# cdwin — cd into Windows path, or Windows home if no arg, supports ~\Documents trick
cdwin() {
    # Initialize _winhome_wsl once
    if [ -z "$_winhome_wsl" ]; then
        local userprofile
        userprofile="$(cmd.exe /C "echo %USERPROFILE%" 2>/dev/null | tr -d '\r')"
        if [ -z "$userprofile" ]; then
            echo "Error: Could not determine Windows home directory." >&2
            return 1
        fi
        _winhome_wsl="$(wslpath "$userprofile" 2>/dev/null)"
        if [ -z "$_winhome_wsl" ]; then
            echo "Error: Could not convert Windows home path." >&2
            return 1
        fi
    fi

    # No arguments → go to Windows home
    if [ "$#" -eq 0 ]; then
        cd "$_winhome_wsl" || return

    # One argument
    elif [ "$#" -eq 1 ]; then
        local winpath="$1"

        # Expand ~\ → Windows home
        if [[ "$winpath" =~ ^~\\(.*) ]]; then
            winpath="$_winhome_wsl/${BASH_REMATCH[1]//\\//}"
        else
            # General conversion
            winpath="$(wslpath "$winpath" 2>/dev/null)"
            if [ -z "$winpath" ]; then
                echo "Error: Could not convert path: $1" >&2
                return 1
            fi
        fi

        cd "$winpath" || return

    else
        echo "Usage: cdwin [windows-path]" >&2
        return 1
    fi
}

# explorerwin — open Windows Explorer at current directory (or given path)
explorerwin() (
    if [ "$#" -eq 0 ]; then
        target="$PWD"
    elif [ "$#" -eq 1 ]; then
        target="$1"
    else
        echo "Usage: explorerwin [path]" >&2
        return 1
    fi

    exec nohup explorer.exe "$(wslpath -w "$target")" >/dev/null 2>&1
)
